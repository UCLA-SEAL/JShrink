diff --git a/reachability-analysis/soot/src/main/java/soot/Scene.java b/reachability-analysis/soot/src/main/java/soot/Scene.java
index 45ef7b209..385a931f3 100755
--- a/reachability-analysis/soot/src/main/java/soot/Scene.java
+++ b/reachability-analysis/soot/src/main/java/soot/Scene.java
@@ -1752,10 +1752,16 @@ public class Scene // extends AbstractHost
         for (String cl : SourceLocator.v().getClassesUnder(path)) {
           // If a project uses jars built by Java 9, there will be a module-info.class
           // in the jar, which causes IllegalArgumentException in ASM
-          if(!cl.equals("module-info")) {
-            SootClass theClass = loadClassAndSupport(cl);
-            if (!theClass.isPhantom) {
-              theClass.setApplicationClass();
+          if(!cl.startsWith("META-INF") && !cl.endsWith("module-info")) {
+            try {
+              SootClass theClass = loadClassAndSupport(cl);
+              if (!theClass.isPhantom) {
+                theClass.setApplicationClass();
+              }
+            }catch(Exception e){
+              e.printStackTrace();
+              System.out.println("Problem class: " + cl);
+              System.exit(1);
             }
           }
         }

diff --git a/reachability-analysis/soot/src/main/java/soot/SourceLocator.java b/reachability-analysis/soot/src/main/java/soot/SourceLocator.java
index 818c043ef..daf2d0cbf 100755
--- a/reachability-analysis/soot/src/main/java/soot/SourceLocator.java
+++ b/reachability-analysis/soot/src/main/java/soot/SourceLocator.java
@@ -375,9 +375,6 @@ public class SourceLocator {
           } else if (fileName.endsWith(".jimple")) {
             int index = fileName.lastIndexOf(".jimple");
             classes.add(prefix + fileName.substring(0, index));
-          } else if (fileName.endsWith(".java")) {
-            int index = fileName.lastIndexOf(".java");
-            classes.add(prefix + fileName.substring(0, index));
           } else if (fileName.endsWith(".dex")) {
             try {
               for (DexFileProvider.DexContainer container : DexFileProvider.v().getDexFromSource(element)) {
