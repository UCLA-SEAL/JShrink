Array.newInstance;boolean[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;boolean[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;boolean[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;boolean[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;byte[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;byte[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;byte[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;byte[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;char[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;char[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;char[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;char[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;com.animoto.api.ApiError[];com.google.gson.MappedObjectConstructor.constructArray;57;;
Array.newInstance;double[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;double[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;double[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;double[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;float[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;float[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;float[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;float[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;int[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;int[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;int[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;int[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;java.io.File[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.io.File[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.io.File[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Boolean[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Boolean[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Boolean[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Byte[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Byte[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Byte[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Character[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Character[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Character[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Class[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Class[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Class[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Double[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Double[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Double[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Float[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Float[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Float[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Integer[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Integer[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Integer[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Long[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Long[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Long[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.Short[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.Short[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.Short[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.String[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.lang.String[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.lang.String[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.lang.reflect.Method[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.math.BigDecimal[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.math.BigDecimal[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.math.BigDecimal[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.math.BigInteger[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.math.BigInteger[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.math.BigInteger[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.net.URL[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.net.URL[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.net.URL[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.sql.Date[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.sql.Date[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.sql.Date[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.sql.Time[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.sql.Time[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.sql.Time[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.sql.Timestamp[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.sql.Timestamp[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.sql.Timestamp[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.util.Calendar[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.util.Calendar[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.util.Calendar[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;java.util.Date[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;java.util.Date[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;java.util.Date[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;long[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;long[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;long[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;long[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;short[];org.apache.commons.beanutils.ConvertUtilsBean.registerArrayConverter;774;;
Array.newInstance;short[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;159;;
Array.newInstance;short[];org.apache.commons.beanutils.converters.ArrayConverter.<init>;180;;
Array.newInstance;short[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Class.forName;com.google.gson.annotations.SerializedName;com.sun.proxy.$Proxy2.<clinit>;;;
Class.forName;com.google.gson.annotations.SerializedName;java.lang.reflect.Proxy$ProxyClassFactory.apply;577;;
Class.forName;com.google.gson.annotations.SerializedName;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.io.File;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.io.File;org.apache.maven.surefire.booter.PropertiesWrapper.class$;85;;
Class.forName;java.io.File;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;java.io.File;org.apache.maven.surefire.booter.TypeEncodedValue.class$;45;;
Class.forName;java.io.PrintStream;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;java.lang.Boolean;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Boolean;org.apache.commons.beanutils.converters.BooleanConverter.class$;181;;
Class.forName;java.lang.Boolean;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;java.lang.Byte;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Byte;org.apache.commons.beanutils.converters.ByteConverter.class$;64;;
Class.forName;java.lang.Byte;org.apache.commons.beanutils.converters.NumberConverter.class$;244;;
Class.forName;java.lang.Character;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Character;org.apache.commons.beanutils.converters.CharacterConverter.class$;59;;
Class.forName;java.lang.Class;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Class;org.apache.maven.surefire.booter.TypeEncodedValue.class$;45;;
Class.forName;java.lang.Class;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.lang.ClassLoader;org.apache.maven.surefire.booter.JdkReflector.class$;40;;
Class.forName;java.lang.ClassLoader;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;java.lang.Double;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Double;org.apache.commons.beanutils.converters.DoubleConverter.class$;64;;
Class.forName;java.lang.Double;org.apache.commons.beanutils.converters.NumberConverter.class$;244;;
Class.forName;java.lang.Float;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Float;org.apache.commons.beanutils.converters.FloatConverter.class$;64;;
Class.forName;java.lang.Float;org.apache.commons.beanutils.converters.NumberConverter.class$;244;;
Class.forName;java.lang.Integer;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Integer;org.apache.commons.beanutils.converters.IntegerConverter.class$;64;;
Class.forName;java.lang.Integer;org.apache.commons.beanutils.converters.NumberConverter.class$;244;;
Class.forName;java.lang.Long;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Long;org.apache.commons.beanutils.converters.LongConverter.class$;64;;
Class.forName;java.lang.Long;org.apache.commons.beanutils.converters.NumberConverter.class$;244;;
Class.forName;java.lang.Object;com.sun.proxy.$Proxy0.<clinit>;;;
Class.forName;java.lang.Object;com.sun.proxy.$Proxy1.<clinit>;;;
Class.forName;java.lang.Object;com.sun.proxy.$Proxy2.<clinit>;;;
Class.forName;java.lang.Object;org.apache.maven.surefire.booter.ProviderFactory.class$;53;;
Class.forName;java.lang.Object;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.lang.Short;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.Short;org.apache.commons.beanutils.converters.NumberConverter.class$;244;;
Class.forName;java.lang.Short;org.apache.commons.beanutils.converters.ShortConverter.class$;64;;
Class.forName;java.lang.String;junit.framework.TestSuite.getTestConstructor;175;;
Class.forName;java.lang.String;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.lang.String;org.apache.commons.beanutils.converters.AbstractConverter.class$;143;;
Class.forName;java.lang.String;org.apache.commons.beanutils.converters.StringConverter.class$;75;;
Class.forName;java.lang.String;org.apache.commons.logging.impl.LogFactoryImpl.class$;231;;
Class.forName;java.lang.String;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;java.lang.String;org.apache.maven.surefire.booter.TypeEncodedValue.class$;45;;
Class.forName;java.lang.String;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.lang.Thread;org.apache.commons.logging.LogFactory.class$;896;;
Class.forName;java.lang.Thread;org.apache.commons.logging.impl.SimpleLog.class$;656;;
Class.forName;java.lang.Throwable;com.sun.proxy.$Proxy0.<clinit>;;;
Class.forName;java.lang.Throwable;org.apache.commons.beanutils.BeanUtilsBean.class$;99;;
Class.forName;java.lang.annotation.Retention;com.sun.proxy.$Proxy1.<clinit>;;;
Class.forName;java.lang.annotation.Retention;java.lang.reflect.Proxy$ProxyClassFactory.apply;577;;
Class.forName;java.lang.annotation.Retention;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.lang.annotation.RetentionPolicy;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.lang.annotation.Target;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.math.BigDecimal;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.math.BigDecimal;org.apache.commons.beanutils.converters.BigDecimalConverter.class$;66;;
Class.forName;java.math.BigInteger;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.math.BigInteger;org.apache.commons.beanutils.converters.BigIntegerConverter.class$;66;;
Class.forName;java.net.URL;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.sql.Date;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.sql.Time;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.sql.Timestamp;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.util.Calendar;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.util.Date;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;java.util.List;org.apache.commons.beanutils.PropertyUtilsBean.class$;126;;
Class.forName;java.util.List;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;java.util.List;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.util.Map;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.util.Properties;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;java.util.logging.LoggingProxyImpl;sun.util.logging.LoggingSupport$1.run;54;;
Class.forName;junit.framework.AssertionFailedError;com.sun.proxy.$Proxy0.<clinit>;;;
Class.forName;junit.framework.Test;com.sun.proxy.$Proxy0.<clinit>;;;
Class.forName;junit.framework.Test;junit.framework.TestSuite.<init>;72;;
Class.forName;junit.framework.TestListener;com.sun.proxy.$Proxy0.<clinit>;;;
Class.forName;junit.framework.TestListener;java.lang.reflect.Proxy$ProxyClassFactory.apply;577;;
Class.forName;org.apache.commons.beanutils.BeanUtils;org.apache.commons.beanutils.BeanUtilsBean.class$;99;;
Class.forName;org.apache.commons.beanutils.ConvertUtils;org.apache.commons.beanutils.ConvertUtilsBean.class$;157;;
Class.forName;org.apache.commons.beanutils.PropertyUtils;org.apache.commons.beanutils.PropertyUtilsBean.class$;126;;
Class.forName;org.apache.commons.logging.LogFactory;org.apache.commons.logging.LogFactory.class$;896;;
Class.forName;org.apache.commons.logging.LogFactory;org.apache.commons.logging.impl.LogFactoryImpl.class$;231;;
Class.forName;org.apache.commons.logging.impl.LogFactoryImpl;org.apache.commons.logging.impl.LogFactoryImpl.class$;231;;
Class.forName;org.apache.commons.logging.impl.SimpleLog;org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass;1081;;
Class.forName;org.apache.commons.logging.impl.WeakHashtable;org.apache.commons.logging.LogFactory.createFactoryStore;357;;
Class.forName;org.apache.maven.surefire.booter.BaseProviderFactory;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.booter.DirectoryScannerParametersAware;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.booter.ForkingReporterFactory;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.booter.ProviderPropertiesAware;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.booter.ReporterConfigurationAware;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.booter.SurefireClassLoadersAware;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.booter.TestArtifactInfoAware;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.booter.TestRequestAware;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.providerapi.ProviderParameters;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.report.ReporterConfiguration;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.report.ReporterFactory;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.suite.RunResult;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.testset.DirectoryScannerParameters;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.testset.RunOrderParameters;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.testset.TestArtifactInfo;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;org.apache.maven.surefire.testset.TestRequest;org.apache.maven.surefire.booter.SurefireReflector.class$;86;;
Class.forName;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1187;;
Class.forName;sun.util.logging.PlatformLogger$DefaultLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;173;;
Class.forName;sun.util.logging.PlatformLogger$JavaLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;176;;
Class.getDeclaredField;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.invoke.MethodHandle.<clinit>;1451;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.util.concurrent.CopyOnWriteArrayList.<clinit>;1683;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.util.concurrent.atomic.AtomicMarkableReference.objectFieldOffset;204;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2276;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2278;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2270;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2272;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2274;isAccessible=false;
Class.getDeclaredField;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;55;isAccessible=false;
Class.getDeclaredFields;com.animoto.api.ApiError;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.DirectingManifest;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.Metadata;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.RenderingManifest;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.RenderingParameters;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.Song;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.dto.ApiResponse;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.dto.Payload;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.dto.Response;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.dto.Status;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.postroll.BasicPostroll;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.postroll.CustomFootagePostroll;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.postroll.Postroll;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.BaseHttpGetOnlyResource;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.BaseResource;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.DirectingAndRenderingJob;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.DirectingJob$Container;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.DirectingJob;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.RenderingJob$Container;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.RenderingJob;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.Storyboard;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.resource.Video;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.visual.BaseVisual;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.visual.Footage;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.visual.Image;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredFields;com.animoto.api.visual.TitleCard;com.google.gson.ObjectNavigator.navigateClassFields;140;;
Class.getDeclaredMethods;com.animoto.api.ApiClientTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.PostrollTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.SongTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.dto.PayloadTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.resource.DirectingAndRenderingJobTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.resource.DirectingJobTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.resource.RenderingJobTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.resource.StoryboardTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.resource.VideoTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.animoto.api.util.CallbackUtilTest;junit.framework.TestSuite.<init>;73;;
Class.getDeclaredMethods;com.google.gson.annotations.SerializedName;sun.reflect.annotation.AnnotationType$1.run;112;;
Class.getDeclaredMethods;java.lang.annotation.Retention;sun.reflect.annotation.AnnotationType$1.run;112;;
Class.getDeclaredMethods;junit.framework.TestCase;junit.framework.TestSuite.<init>;73;;
Class.getMethod;<com.animoto.api.ApiClientTest: void testConstructor()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testBasicPostrollDeserialization()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testBasicPostrollInstantiation()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testBasicPostrollSerialization()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testBasicPostrollTemplate()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testCustomFootagePostrollDeserialization()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testCustomFootagePostrollInstantiation()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSerialization()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSourceUrl()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.PostrollTest: void testCustomFootagePostrollTemplate()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.SongTest: void testAttributes()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob getDirectingAndRenderingJob()>;com.animoto.api.dto.Payload.getBaseResource;62;isAccessible=false;
Class.getMethod;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingJob getDirectingJob()>;com.animoto.api.dto.Payload.getBaseResource;62;isAccessible=false;
Class.getMethod;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob getRenderingJob()>;com.animoto.api.dto.Payload.getBaseResource;62;isAccessible=false;
Class.getMethod;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard getStoryboard()>;com.animoto.api.dto.Payload.getBaseResource;62;isAccessible=false;
Class.getMethod;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video getVideo()>;com.animoto.api.dto.Payload.getBaseResource;62;isAccessible=false;
Class.getMethod;<com.animoto.api.dto.PayloadTest: void testGetBaseResource()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.Format: com.animoto.api.enums.Format[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.Format: java.lang.String getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;10;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.Framerate: com.animoto.api.enums.Framerate[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.Framerate: float getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;10;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.Resolution: com.animoto.api.enums.Resolution[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.Resolution: java.lang.String getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;10;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.Rotation: int getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;10;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.Style: java.lang.String getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;10;isAccessible=false;
Class.getMethod;<com.animoto.api.enums.VisualType: java.lang.String getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;10;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.DirectingAndRenderingJobTest: void testFromJson()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.DirectingJobTest: void testGetLocation()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.DirectingJobTest: void testGetUrl()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.DirectingJobTest: void testIsComplete()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.DirectingJobTest: void testIsFailed()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.DirectingJobTest: void testIsPending()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.DirectingJobTest: void testToJson()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.RenderingJobTest: void testErrorParsing()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.RenderingJobTest: void testToJson()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.StoryboardTest: void testFromJson()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.resource.VideoTest: void testFromJson()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromDirectingAndRenderingJson()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromRenderingJson()>;junit.framework.TestCase.runTest;145;isAccessible=false;
Class.getMethod;<com.google.gson.annotations.SerializedName: java.lang.String value()>;com.sun.proxy.$Proxy2.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>;org.apache.maven.surefire.util.ReflectionUtils.tryGetMethod;57;isAccessible=false;
Class.getMethod;<java.lang.Object: boolean equals(java.lang.Object)>;com.sun.proxy.$Proxy0.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: boolean equals(java.lang.Object)>;com.sun.proxy.$Proxy1.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: boolean equals(java.lang.Object)>;com.sun.proxy.$Proxy2.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: boolean equals(java.lang.Object)>;sun.misc.ProxyGenerator.<clinit>;376;isAccessible=false;
Class.getMethod;<java.lang.Object: int hashCode()>;com.sun.proxy.$Proxy0.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: int hashCode()>;com.sun.proxy.$Proxy1.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: int hashCode()>;com.sun.proxy.$Proxy2.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: int hashCode()>;sun.misc.ProxyGenerator.<clinit>;374;isAccessible=false;
Class.getMethod;<java.lang.Object: java.lang.String toString()>;com.sun.proxy.$Proxy0.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: java.lang.String toString()>;com.sun.proxy.$Proxy1.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: java.lang.String toString()>;com.sun.proxy.$Proxy2.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: java.lang.String toString()>;sun.misc.ProxyGenerator.<clinit>;377;isAccessible=false;
Class.getMethod;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.commons.logging.LogFactory.directGetContextClassLoader;896;isAccessible=false;
Class.getMethod;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.commons.logging.impl.SimpleLog.getContextClassLoader;656;isAccessible=false;
Class.getMethod;<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>;org.apache.commons.beanutils.BeanUtilsBean.getInitCauseMethod;1096;isAccessible=false;
Class.getMethod;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;com.sun.proxy.$Proxy1.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;com.sun.proxy.$Proxy2.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;com.sun.proxy.$Proxy1.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<junit.framework.Test: void run(junit.framework.TestResult)>;org.apache.maven.surefire.common.junit3.JUnit3Reflector.getMethod;109;isAccessible=false;
Class.getMethod;<junit.framework.TestListener: void addError(junit.framework.Test,java.lang.Throwable)>;com.sun.proxy.$Proxy0.<clinit>;;isAccessible=false;
Class.getMethod;<junit.framework.TestListener: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>;com.sun.proxy.$Proxy0.<clinit>;;isAccessible=false;
Class.getMethod;<junit.framework.TestListener: void endTest(junit.framework.Test)>;com.sun.proxy.$Proxy0.<clinit>;;isAccessible=false;
Class.getMethod;<junit.framework.TestListener: void startTest(junit.framework.Test)>;com.sun.proxy.$Proxy0.<clinit>;;isAccessible=false;
Class.getMethod;<junit.framework.TestResult: void addListener(junit.framework.TestListener)>;org.apache.maven.surefire.common.junit3.JUnit3Reflector.tryGetMethod;97;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.booter.BaseProviderFactory: void setClassLoaders(java.lang.ClassLoader,java.lang.ClassLoader)>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.booter.BaseProviderFactory: void setDirectoryScannerParameters(org.apache.maven.surefire.testset.DirectoryScannerParameters)>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.booter.BaseProviderFactory: void setProviderProperties(java.util.Properties)>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.booter.BaseProviderFactory: void setReporterConfiguration(org.apache.maven.surefire.report.ReporterConfiguration)>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.booter.BaseProviderFactory: void setRunOrderParameters(org.apache.maven.surefire.testset.RunOrderParameters)>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.booter.BaseProviderFactory: void setTestArtifactInfo(org.apache.maven.surefire.testset.TestArtifactInfo)>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.booter.BaseProviderFactory: void setTestRequest(org.apache.maven.surefire.testset.TestRequest)>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.booter.ForkedBooter: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;544;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.junit.JUnit3Provider: org.apache.maven.surefire.suite.RunResult invoke(java.lang.Object)>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.suite.RunResult: int getCompletedCount()>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.suite.RunResult: int getErrors()>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.suite.RunResult: int getFailures()>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethod;<org.apache.maven.surefire.suite.RunResult: int getSkipped()>;org.apache.maven.surefire.util.ReflectionUtils.getMethod;45;isAccessible=false;
Class.getMethods;com.animoto.api.resource.BaseHttpGetOnlyResource;java.beans.Introspector.getPublicDeclaredMethods;1336;;
Class.getMethods;com.animoto.api.resource.BaseResource;java.beans.Introspector.getPublicDeclaredMethods;1336;;
Class.getMethods;com.animoto.api.resource.DirectingAndRenderingJob;java.beans.Introspector.getPublicDeclaredMethods;1336;;
Class.getMethods;com.animoto.api.resource.RenderingJob;java.beans.Introspector.getPublicDeclaredMethods;1336;;
Class.getMethods;com.animoto.api.resource.Storyboard;java.beans.Introspector.getPublicDeclaredMethods;1336;;
Class.getMethods;com.animoto.api.resource.Video;java.beans.Introspector.getPublicDeclaredMethods;1336;;
Class.getMethods;com.google.gson.annotations.SerializedName;sun.misc.ProxyGenerator.generateClassFile;451;;
Class.getMethods;java.lang.Object;java.beans.Introspector.getPublicDeclaredMethods;1336;;
Class.getMethods;java.lang.annotation.Retention;sun.misc.ProxyGenerator.generateClassFile;451;;
Class.getMethods;junit.framework.TestListener;sun.misc.ProxyGenerator.generateClassFile;451;;
Class.newInstance;junit.framework.TestResult;org.apache.maven.surefire.junit.JUnitTestSet.execute;82;;
Class.newInstance;org.apache.commons.logging.impl.LogFactoryImpl;org.apache.commons.logging.LogFactory.createFactory;1160;;
Class.newInstance;org.apache.commons.logging.impl.WeakHashtable;org.apache.commons.logging.LogFactory.createFactoryStore;358;;
Class.newInstance;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1196;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor1;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor1;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.text.resources.en.FormatData_en;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.util.resources.CalendarData;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.util.resources.en.CalendarData_en;java.util.ResourceBundle$Control.newBundle;2662;;
Constructor.getModifiers;<junit.framework.TestResult: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.commons.logging.impl.LogFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=false;
Constructor.getModifiers;<org.apache.commons.logging.impl.WeakHashtable: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CalendarData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.en.CalendarData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<com.animoto.api.ApiClientTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.ApiError: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.Metadata: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.PostrollTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.RenderingParameters: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.SongTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.dto.ApiResponse: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.dto.Payload: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.dto.PayloadTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.dto.Response: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.dto.Status: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.postroll.BasicPostroll: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.postroll.CustomFootagePostroll: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.resource.DirectingAndRenderingJob: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.resource.DirectingAndRenderingJobTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.resource.DirectingJobTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.resource.RenderingJob: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.resource.RenderingJobTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.resource.Storyboard: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.resource.StoryboardTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.resource.Video: void <init>()>;com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor;67;isAccessible=true;
Constructor.newInstance;<com.animoto.api.resource.VideoTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.animoto.api.util.CallbackUtilTest: void <init>()>;junit.framework.TestSuite.createTest;131;isAccessible=false;
Constructor.newInstance;<com.sun.proxy.$Proxy0: void <init>(java.lang.reflect.InvocationHandler)>;java.lang.reflect.Proxy.newProxyInstance;739;isAccessible=false;
Constructor.newInstance;<com.sun.proxy.$Proxy1: void <init>(java.lang.reflect.InvocationHandler)>;java.lang.reflect.Proxy.newProxyInstance;739;isAccessible=false;
Constructor.newInstance;<com.sun.proxy.$Proxy2: void <init>(java.lang.reflect.InvocationHandler)>;java.lang.reflect.Proxy.newProxyInstance;739;isAccessible=false;
Constructor.newInstance;<junit.framework.TestResult: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<junit.framework.TestSuite: void <init>(java.lang.Class)>;org.apache.maven.surefire.common.junit3.JUnit3Reflector.constructTestObject;127;isAccessible=false;
Constructor.newInstance;<org.apache.commons.logging.impl.LogFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)>;org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass;1116;isAccessible=false;
Constructor.newInstance;<org.apache.commons.logging.impl.SimpleLog: void <init>(java.lang.String)>;org.apache.commons.logging.impl.LogFactoryImpl.newInstance;608;isAccessible=false;
Constructor.newInstance;<org.apache.commons.logging.impl.WeakHashtable: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.maven.surefire.booter.BaseProviderFactory: void <init>(org.apache.maven.surefire.report.ReporterFactory,java.lang.Boolean)>;org.apache.maven.surefire.util.ReflectionUtils.instantiateTwoArgs;154;isAccessible=false;
Constructor.newInstance;<org.apache.maven.surefire.booter.ForkingReporterFactory: void <init>(java.lang.Boolean,java.io.PrintStream)>;org.apache.maven.surefire.util.ReflectionUtils.newInstance;88;isAccessible=false;
Constructor.newInstance;<org.apache.maven.surefire.junit.JUnit3Provider: void <init>(org.apache.maven.surefire.providerapi.ProviderParameters)>;org.apache.maven.surefire.util.ReflectionUtils.instantiateOneArg;130;isAccessible=false;
Constructor.newInstance;<org.apache.maven.surefire.report.ReporterConfiguration: void <init>(java.io.File,java.lang.Boolean)>;org.apache.maven.surefire.util.ReflectionUtils.newInstance;88;isAccessible=false;
Constructor.newInstance;<org.apache.maven.surefire.testset.DirectoryScannerParameters: void <init>(java.io.File,java.util.List,java.util.List,java.util.List,java.lang.Boolean,java.lang.String)>;org.apache.maven.surefire.util.ReflectionUtils.newInstance;88;isAccessible=false;
Constructor.newInstance;<org.apache.maven.surefire.testset.RunOrderParameters: void <init>(java.lang.String,java.lang.String)>;org.apache.maven.surefire.util.ReflectionUtils.newInstance;88;isAccessible=false;
Constructor.newInstance;<org.apache.maven.surefire.testset.TestArtifactInfo: void <init>(java.lang.String,java.lang.String)>;org.apache.maven.surefire.util.ReflectionUtils.newInstance;88;isAccessible=false;
Constructor.newInstance;<org.apache.maven.surefire.testset.TestRequest: void <init>(java.util.List,java.io.File,java.lang.String,java.lang.String)>;org.apache.maven.surefire.util.ReflectionUtils.newInstance;88;isAccessible=false;
Constructor.newInstance;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CalendarData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.en.CalendarData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;com.google.gson.JsonSerializationVisitor.getFieldValue;230;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;com.google.gson.JsonSerializationVisitor.getFieldValue;230;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;com.google.gson.JsonSerializationVisitor.getFieldValue;230;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.DirectingManifest: java.lang.String title>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;com.google.gson.JsonSerializationVisitor.getFieldValue;230;isAccessible=true;
Field.get*;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.Song: java.lang.Float duration>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.Song: java.lang.Float startTime>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.Song: java.lang.String sourceUrl>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.postroll.Postroll: java.lang.String template>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: java.lang.String state>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.BaseResource: java.util.Map links>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;com.google.gson.JsonSerializationVisitor.getFieldValue;230;isAccessible=true;
Field.get*;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;com.google.gson.JsonSerializationVisitor.getFieldValue;230;isAccessible=true;
Field.get*;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;com.google.gson.JsonSerializationVisitor.getFieldValue;230;isAccessible=true;
Field.get*;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;com.google.gson.JsonSerializationVisitor.getFieldValue;230;isAccessible=true;
Field.get*;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Footage: boolean cover>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Footage: java.lang.Float duration>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Footage: java.lang.Float startTime>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Image: boolean cover>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.TitleCard: java.lang.String h1>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<com.animoto.api.visual.TitleCard: java.lang.String h2>;com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler;197;isAccessible=true;
Field.get*;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.ApiError: java.lang.String code>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.ApiError: java.lang.String code>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.ApiError: java.lang.String message>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.ApiError: java.lang.String message>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: java.lang.String title>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.DirectingManifest: java.lang.String title>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Metadata: float duration>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.Metadata: float duration>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Metadata: java.util.List songs>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.Metadata: java.util.List songs>;java.lang.reflect.Field.getFactory;;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Metadata: java.util.List songs>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Metadata: java.util.List visuals>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.Metadata: java.util.List visuals>;java.lang.reflect.Field.getFactory;;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Metadata: java.util.List visuals>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Song: java.lang.Float duration>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.Song: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Song: java.lang.Float startTime>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.Song: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.Song: java.lang.String sourceUrl>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.Song: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingJob directingJob>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardBundlingJob storyboardBundlingJob>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardUnbundlingJob storyboardUnbundlingJob>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.dto.Status: int code>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.dto.Status: int code>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.postroll.Postroll: java.lang.String template>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.postroll.Postroll: java.lang.String template>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String state>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String state>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map links>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map links>;java.lang.reflect.Field.getFactory;;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map links>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest directingManifest>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest renderingManifest>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: boolean cover>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: boolean cover>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: java.lang.Float startTime>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Image: boolean cover>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.Image: boolean cover>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.TitleCard: java.lang.String h1>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.TitleCard: java.lang.String h1>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.animoto.api.visual.TitleCard: java.lang.String h2>;java.lang.reflect.Field.declaredAnnotations;;isAccessible=false;
Field.getDeclaringClass;<com.animoto.api.visual.TitleCard: java.lang.String h2>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String code>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String code>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String code>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String code>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String code>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String code>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String code>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String message>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String message>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String message>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String message>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String message>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String message>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.ApiError: java.lang.String message>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: java.lang.String title>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: java.lang.String title>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: java.lang.String title>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: java.lang.String title>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: java.lang.String title>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: java.lang.String title>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.DirectingManifest: java.lang.String title>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: float duration>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: float duration>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: float duration>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: float duration>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List songs>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List songs>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List songs>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List songs>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List songs>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List songs>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List songs>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List visuals>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List visuals>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List visuals>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List visuals>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List visuals>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List visuals>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.Metadata: java.util.List visuals>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float duration>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float duration>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float startTime>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float startTime>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.String sourceUrl>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.String sourceUrl>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.Song: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingJob directingJob>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingJob directingJob>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardBundlingJob storyboardBundlingJob>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardBundlingJob storyboardBundlingJob>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardUnbundlingJob storyboardUnbundlingJob>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardUnbundlingJob storyboardUnbundlingJob>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: int code>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: int code>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: int code>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: int code>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: int code>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: int code>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.dto.Status: int code>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.BasicPostroll: java.lang.String POWERED_BY_ANIMOTO>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.BasicPostroll: java.lang.String POWERED_BY_ANIMOTO>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.BasicPostroll: java.lang.String WHITE_LABEL>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.BasicPostroll: java.lang.String WHITE_LABEL>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.Postroll: java.lang.String template>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.Postroll: java.lang.String template>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.Postroll: java.lang.String template>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.Postroll: java.lang.String template>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.Postroll: java.lang.String template>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.Postroll: java.lang.String template>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.postroll.Postroll: java.lang.String template>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String BREAK>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String BREAK>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String state>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String state>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String state>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String state>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String state>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String state>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String state>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map links>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map links>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map links>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map links>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map links>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map links>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map links>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest directingManifest>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest directingManifest>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest renderingManifest>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest renderingManifest>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob this$0>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob this$0>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.BaseVisual: com.animoto.api.enums.VisualType visualType>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: boolean cover>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: boolean cover>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: boolean cover>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: boolean cover>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: boolean cover>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: boolean cover>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: boolean cover>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float duration>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float duration>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float duration>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float startTime>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float startTime>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.Float startTime>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: boolean cover>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: boolean cover>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: boolean cover>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: boolean cover>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: boolean cover>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: boolean cover>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: boolean cover>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.Boolean spotlit>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h1>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h1>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h1>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h1>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h1>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h1>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h1>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h2>;com.google.gson.FieldAttributes.hasModifier;115;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h2>;java.lang.reflect.Field.isSynthetic;;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h2>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h2>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h2>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h2>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.animoto.api.visual.TitleCard: java.lang.String h2>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getName;<com.animoto.api.ApiError: java.lang.String code>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.ApiError: java.lang.String message>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.DirectingManifest: com.animoto.api.Song song>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Pacing pacing>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.DirectingManifest: com.animoto.api.enums.Style style>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.DirectingManifest: com.animoto.api.postroll.Postroll postroll>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.DirectingManifest: com.animoto.api.visual.Visual[] visuals>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.DirectingManifest: java.lang.String title>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.Metadata: float duration>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.Metadata: java.util.List songs>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.Metadata: java.util.List visuals>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.RenderingManifest: com.animoto.api.RenderingParameters renderingParameters>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.RenderingManifest: java.lang.String storyboardUrl>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.Song: java.lang.Float duration>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.Song: java.lang.Float startTime>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.Song: java.lang.String sourceUrl>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingJob directingJob>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardBundlingJob storyboardBundlingJob>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardUnbundlingJob storyboardUnbundlingJob>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.dto.Status: int code>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.postroll.Postroll: java.lang.String template>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response response>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat httpCallbackFormat>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard storyboard>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video video>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: java.lang.String httpCallback>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: java.lang.String requestId>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: java.lang.String state>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.BaseResource: java.util.Map links>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest directingManifest>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest renderingManifest>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.DirectingJob$Container: com.animoto.api.resource.DirectingJob directingJob>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.DirectingJob: com.animoto.api.DirectingManifest directingManifest>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.RenderingJob$Container: com.animoto.api.resource.RenderingJob renderingJob>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest renderingManifest>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.Footage: boolean cover>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.Footage: com.animoto.api.enums.AudioMix audioMix>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.Footage: java.lang.Float startTime>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.Footage: java.lang.String sourceUrl>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.Image: boolean cover>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.Image: com.animoto.api.enums.Rotation rotation>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.Image: java.lang.String sourceUrl>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.TitleCard: java.lang.String h1>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<com.animoto.api.visual.TitleCard: java.lang.String h2>;com.google.gson.RecursiveFieldNamingPolicy.translateName;34;isAccessible=true;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CANCELLED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CONDITION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int PROPAGATE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int SIGNAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;java.lang.Class.searchFields;;isAccessible=false;
Field.set*;<com.animoto.api.ApiError: java.lang.String code>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.ApiError: java.lang.String message>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.Metadata: com.animoto.api.RenderingParameters renderingParameters>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.Metadata: float duration>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.Metadata: java.util.List songs>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.Metadata: java.util.List visuals>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Format format>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Framerate framerate>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.RenderingParameters: com.animoto.api.enums.Resolution resolution>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.dto.ApiResponse: com.animoto.api.dto.Response response>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob directingAndRenderingJob>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob renderingJob>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard storyboard>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video video>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.dto.Response: com.animoto.api.dto.Payload payload>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.dto.Response: com.animoto.api.dto.Status status>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.dto.Status: com.animoto.api.ApiError[] apiErrors>;com.google.gson.JsonObjectDeserializationVisitor.visitArrayField;82;isAccessible=true;
Field.set*;<com.animoto.api.dto.Status: int code>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.postroll.CustomFootagePostroll: java.lang.String sourceUrl>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.postroll.Postroll: java.lang.String template>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata metadata>;com.google.gson.JsonObjectDeserializationVisitor.visitObjectField;63;isAccessible=true;
Field.set*;<com.animoto.api.resource.BaseResource: java.lang.String state>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Field.set*;<com.animoto.api.resource.BaseResource: java.util.Map links>;com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler;119;isAccessible=true;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isFailed()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: boolean isPending()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader;64;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader;64;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;797;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.PropertyDescriptor.setWriteMethod;328;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Resource: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Resource: java.lang.String getAccept()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Resource: java.lang.String getContentType()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Resource: java.lang.String getContentType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;788;isAccessible=false;
Method.getDeclaringClass;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;789;isAccessible=false;
Method.getDeclaringClass;<com.google.gson.annotations.SerializedName: java.lang.String value()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.beans.MethodRef.get;71;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.beans.PropertyDescriptor.setReadMethod;258;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Executable.declaredAnnotations;602;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Executable.declaredAnnotations;603;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader;64;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;com.sun.beans.finder.MethodFinder.findAccessibleMethod;136;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.beans.Introspector.getPublicDeclaredMethods;1339;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.beans.Introspector.getPublicDeclaredMethods;1345;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.beans.MethodDescriptor.setMethod;114;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.beans.MethodRef.set;48;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<java.lang.annotation.Annotation: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.annotation.Annotation: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.annotation.Annotation: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getModifiers;<com.animoto.api.ApiClientTest: void testConstructor()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.ApiClientTest: void testConstructor()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.Jsonable: java.lang.String toJson()>;java.lang.Class$MethodArray.addInterfaceMethods;2781;isAccessible=false;
Method.getModifiers;<com.animoto.api.Jsonable: java.lang.String toJson()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testBasicPostrollDeserialization()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testBasicPostrollDeserialization()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testBasicPostrollInstantiation()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testBasicPostrollInstantiation()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testBasicPostrollSerialization()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testBasicPostrollSerialization()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testBasicPostrollTemplate()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testBasicPostrollTemplate()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollDeserialization()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollDeserialization()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollInstantiation()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollInstantiation()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSerialization()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSerialization()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSourceUrl()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSourceUrl()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollTemplate()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.PostrollTest: void testCustomFootagePostrollTemplate()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.SongTest: void testAttributes()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.SongTest: void testAttributes()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.dto.PayloadTest: void testGetBaseResource()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.dto.PayloadTest: void testGetBaseResource()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isFailed()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: boolean isPending()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJobTest: void testFromJson()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingAndRenderingJobTest: void testFromJson()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testGetLocation()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testGetLocation()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testGetUrl()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testGetUrl()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testIsComplete()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testIsComplete()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testIsFailed()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testIsFailed()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testIsPending()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testIsPending()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testToJson()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.DirectingJobTest: void testToJson()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJobTest: void testErrorParsing()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJobTest: void testErrorParsing()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJobTest: void testToJson()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.RenderingJobTest: void testToJson()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Resource: java.lang.String getAccept()>;java.lang.Class$MethodArray.addInterfaceMethods;2781;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Resource: java.lang.String getAccept()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Resource: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Resource: java.lang.String getContentType()>;java.lang.Class$MethodArray.addInterfaceMethods;2781;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Resource: java.lang.String getContentType()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Resource: java.lang.String getContentType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Resource: java.lang.String getLocation()>;java.lang.Class$MethodArray.addInterfaceMethods;2781;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Resource: java.lang.String getLocation()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.StoryboardTest: void testFromJson()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.StoryboardTest: void testFromJson()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getAccept()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;org.apache.commons.beanutils.MethodUtils.getAccessibleMethod;780;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.VideoTest: void testFromJson()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.resource.VideoTest: void testFromJson()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromDirectingAndRenderingJson()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromDirectingAndRenderingJson()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromRenderingJson()>;junit.framework.TestCase.runTest;149;isAccessible=false;
Method.getModifiers;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromRenderingJson()>;junit.framework.TestSuite.isPublicTestMethod;185;isAccessible=false;
Method.getModifiers;<com.google.gson.annotations.SerializedName: java.lang.String value()>;java.lang.reflect.Executable.isSynthetic;516;isAccessible=false;
Method.getModifiers;<com.google.gson.annotations.SerializedName: java.lang.String value()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<com.google.gson.annotations.SerializedName: java.lang.String value()>;sun.reflect.annotation.AnnotationType.<init>;121;isAccessible=false;
Method.getModifiers;<com.google.gson.annotations.SerializedName: java.lang.String value()>;sun.reflect.annotation.AnnotationType.<init>;122;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: int hashCode()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: int hashCode()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: int hashCode()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: int hashCode()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.Class getClass()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.Class getClass()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.Class getClass()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.String toString()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.String toString()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.String toString()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notify()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notify()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notify()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notify()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notify()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notifyAll()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notifyAll()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notifyAll()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notifyAll()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait()>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait()>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait()>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.beans.Introspector.getTargetEventInfo;1000;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.beans.Introspector.getTargetPropertyInfo;492;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Executable.isVarArgs;503;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Executable.printModifiersIfNonzero;97;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: boolean equals(java.lang.Object)>;java.lang.Class$MethodArray.addInterfaceMethods;2781;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: boolean equals(java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: int hashCode()>;java.lang.Class$MethodArray.addInterfaceMethods;2781;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: int hashCode()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;java.lang.Class$MethodArray.addInterfaceMethods;2781;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;java.lang.Class.privateGetMethodRecursive;;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: java.lang.String toString()>;java.lang.Class$MethodArray.addInterfaceMethods;2781;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Annotation: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;java.lang.reflect.Executable.isSynthetic;516;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;sun.reflect.annotation.AnnotationType.<init>;121;isAccessible=false;
Method.getModifiers;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;sun.reflect.annotation.AnnotationType.<init>;122;isAccessible=false;
Method.getModifiers;<junit.framework.TestListener: void addError(junit.framework.Test,java.lang.Throwable)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<junit.framework.TestListener: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<junit.framework.TestListener: void endTest(junit.framework.Test)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<junit.framework.TestListener: void startTest(junit.framework.Test)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.maven.surefire.booter.ForkedBooter: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;557;isAccessible=false;
Method.getName;<com.animoto.api.ApiClientTest: void setUp()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.ApiClientTest: void setUp()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.ApiClientTest: void setUp()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.ApiClientTest: void testConstructor()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.ApiClientTest: void testConstructor()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.ApiClientTest: void testConstructor()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.Jsonable: java.lang.String toJson()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void setUp()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void setUp()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void setUp()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollDeserialization()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollDeserialization()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollDeserialization()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollInstantiation()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollInstantiation()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollInstantiation()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollSerialization()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollSerialization()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollSerialization()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollTemplate()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollTemplate()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testBasicPostrollTemplate()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollDeserialization()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollDeserialization()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollDeserialization()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollInstantiation()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollInstantiation()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollInstantiation()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSerialization()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSerialization()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSerialization()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSourceUrl()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSourceUrl()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSourceUrl()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollTemplate()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollTemplate()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.PostrollTest: void testCustomFootagePostrollTemplate()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.SongTest: void testAttributes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.SongTest: void testAttributes()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.SongTest: void testAttributes()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.BaseResource getBaseResource(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob getDirectingAndRenderingJob()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob getRawDirectingAndRenderingJob()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingJob getDirectingJob()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingJob getRawDirectingJob()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob getRawRenderingJob()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob getRenderingJob()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardBundlingJob getStoryboardBundlingJob()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.StoryboardUnbundlingJob getStoryboardUnbundlingJob()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video getVideo()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.PayloadTest: void testGetBaseResource()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.dto.PayloadTest: void testGetBaseResource()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.dto.PayloadTest: void testGetBaseResource()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.enums.Format: com.animoto.api.enums.Format valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Format: com.animoto.api.enums.Format[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Format: java.lang.String getValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Framerate: com.animoto.api.enums.Framerate valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Framerate: com.animoto.api.enums.Framerate[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Framerate: float getValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Resolution: com.animoto.api.enums.Resolution valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Resolution: com.animoto.api.enums.Resolution[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Resolution: java.lang.String getValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Rotation: com.animoto.api.enums.Rotation valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Rotation: com.animoto.api.enums.Rotation[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Rotation: int getValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Style: com.animoto.api.enums.Style valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Style: com.animoto.api.enums.Style[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.Style: java.lang.String getValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.VisualType: com.animoto.api.enums.VisualType valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.VisualType: com.animoto.api.enums.VisualType[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.enums.VisualType: java.lang.String getValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJobTest: void testFromJson()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJobTest: void testFromJson()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingAndRenderingJobTest: void testFromJson()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void setUp()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void setUp()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void setUp()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testGetLocation()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testGetLocation()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testGetLocation()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testGetUrl()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testGetUrl()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testGetUrl()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsComplete()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsComplete()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsComplete()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsFailed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsFailed()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsFailed()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsPending()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsPending()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testIsPending()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testToJson()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testToJson()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.DirectingJobTest: void testToJson()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.PropertyDescriptor.setWriteMethod;330;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJobTest: void testErrorParsing()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJobTest: void testErrorParsing()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJobTest: void testErrorParsing()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJobTest: void testToJson()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJobTest: void testToJson()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.RenderingJobTest: void testToJson()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.Resource: java.lang.String getAccept()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.Resource: java.lang.String getAccept()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.Resource: java.lang.String getContentType()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.Resource: java.lang.String getContentType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<com.animoto.api.resource.Resource: java.lang.String getLocation()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.StoryboardTest: void testFromJson()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.StoryboardTest: void testFromJson()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.StoryboardTest: void testFromJson()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<com.animoto.api.resource.VideoTest: void testFromJson()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.resource.VideoTest: void testFromJson()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.resource.VideoTest: void testFromJson()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromDirectingAndRenderingJson()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromDirectingAndRenderingJson()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromDirectingAndRenderingJson()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromRenderingJson()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromRenderingJson()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromRenderingJson()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<com.google.gson.annotations.SerializedName: java.lang.String value()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<com.google.gson.annotations.SerializedName: java.lang.String value()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.google.gson.annotations.SerializedName: java.lang.String value()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<com.google.gson.annotations.SerializedName: java.lang.String value()>;sun.reflect.annotation.AnnotationInvocationHandler.invoke;58;isAccessible=false;
Method.getName;<com.google.gson.annotations.SerializedName: java.lang.String value()>;sun.reflect.annotation.AnnotationType.<init>;127;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.lang.ClassLoader getParent()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: void clearAssertionStatus()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.beans.Introspector.processPropertyDescriptors;664;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.beans.PropertyDescriptor.setReadMethod;260;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.beans.Introspector.getTargetEventInfo;1004;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.beans.Introspector.getTargetPropertyInfo;496;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.beans.MethodDescriptor.<init>;71;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.specificToGenericStringHeader;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean holdsLock(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean interrupted()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isAlive()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isDaemon()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isInterrupted()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int activeCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int countStackFrames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int enumerate(java.lang.Thread[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int getPriority()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.String getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread currentThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$State getState()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.util.Map getAllStackTraces()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: long getId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void checkAccess()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void destroy()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void dumpStack()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void interrupt()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join(long,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void resume()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void run()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setDaemon(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setName(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setPriority(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void sleep(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void sleep(long,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void start()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void stop()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void stop(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void suspend()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void yield()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.String getLocalizedMessage()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.String getMessage()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable getCause()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void printStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: boolean equals(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: boolean equals(java.lang.Object)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: int hashCode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: int hashCode()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: java.lang.Class annotationType()>;sun.reflect.annotation.AnnotationInvocationHandler.invoke;58;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: java.lang.String toString()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.annotation.Annotation: java.lang.String toString()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;sun.reflect.annotation.AnnotationInvocationHandler.invoke;58;isAccessible=false;
Method.getName;<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>;sun.reflect.annotation.AnnotationType.<init>;127;isAccessible=false;
Method.getName;<java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(byte,byte)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(char,char)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(double,double,double)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(float,float,float)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,byte,byte)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,char,char)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,double,double,double)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,float,float,float)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,long,long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(java.lang.String,short,short)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(long,long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertEquals(short,short)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertFalse(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertFalse(java.lang.String,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertNotNull(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertNotNull(java.lang.String,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertNull(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertNull(java.lang.String,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertSame(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertTrue(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void assertTrue(java.lang.String,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void fail()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Assert: void fail(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Test: int countTestCases()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.Test: void run(junit.framework.TestResult)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestCase: int countTestCases()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestCase: int countTestCases()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: int countTestCases()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: java.lang.String getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestCase: java.lang.String getName()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: java.lang.String getName()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestCase: java.lang.String toString()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: java.lang.String toString()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: junit.framework.TestResult createResult()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: junit.framework.TestResult createResult()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: junit.framework.TestResult run()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestCase: junit.framework.TestResult run()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: junit.framework.TestResult run()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: void run(junit.framework.TestResult)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestCase: void run(junit.framework.TestResult)>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: void run(junit.framework.TestResult)>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: void runBare()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestCase: void runBare()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: void runBare()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: void runTest()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: void runTest()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: void setName(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestCase: void setName(java.lang.String)>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: void setName(java.lang.String)>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: void setUp()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: void setUp()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestCase: void tearDown()>;junit.framework.TestSuite.addTestMethod;105;isAccessible=false;
Method.getName;<junit.framework.TestCase: void tearDown()>;junit.framework.TestSuite.isTestMethod;189;isAccessible=false;
Method.getName;<junit.framework.TestListener: void addError(junit.framework.Test,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestListener: void addError(junit.framework.Test,java.lang.Throwable)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<junit.framework.TestListener: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestListener: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<junit.framework.TestListener: void endTest(junit.framework.Test)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestListener: void endTest(junit.framework.Test)>;org.apache.maven.surefire.junit.TestListenerInvocationHandler.invoke;118;isAccessible=false;
Method.getName;<junit.framework.TestListener: void endTest(junit.framework.Test)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<junit.framework.TestListener: void startTest(junit.framework.Test)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestListener: void startTest(junit.framework.Test)>;org.apache.maven.surefire.junit.TestListenerInvocationHandler.invoke;118;isAccessible=false;
Method.getName;<junit.framework.TestListener: void startTest(junit.framework.Test)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<junit.framework.TestResult: boolean shouldStop()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: boolean wasSuccessful()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: int errorCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: int failureCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: int runCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: java.util.Enumeration errors()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: java.util.Enumeration failures()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: void addListener(junit.framework.TestListener)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: void endTest(junit.framework.Test)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: void removeListener(junit.framework.TestListener)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: void startTest(junit.framework.Test)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<junit.framework.TestResult: void stop()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isDebugEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isErrorEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isFatalEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isInfoEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isTraceEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isWarnEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void debug(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void error(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void fatal(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void fatal(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void info(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void info(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void trace(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void warn(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: boolean isDebugEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: boolean isErrorEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: boolean isFatalEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: boolean isInfoEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: boolean isTraceEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: boolean isWarnEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: int getLevel()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void debug(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void debug(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void error(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void error(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void fatal(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void fatal(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void info(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void info(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void trace(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void trace(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void warn(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.SimpleLog: void warn(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: java.lang.ClassLoader getTestClassLoader()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: java.util.Properties getProviderProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.report.ConsoleLogger getConsoleLogger()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.report.ReporterConfiguration getReporterConfiguration()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.report.ReporterFactory getReporterFactory()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.testset.DirectoryScannerParameters getDirectoryScannerParameters()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.testset.TestArtifactInfo getTestArtifactInfo()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.testset.TestRequest getTestRequest()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.util.DirectoryScanner getDirectoryScanner()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.util.RunOrderCalculator getRunOrderCalculator()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: org.apache.maven.surefire.util.ScanResult getScanResult()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: void setClassLoaders(java.lang.ClassLoader,java.lang.ClassLoader)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: void setDirectoryScannerParameters(org.apache.maven.surefire.testset.DirectoryScannerParameters)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: void setProviderProperties(java.util.Properties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: void setReporterConfiguration(org.apache.maven.surefire.report.ReporterConfiguration)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: void setRunOrderParameters(org.apache.maven.surefire.testset.RunOrderParameters)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: void setTestArtifactInfo(org.apache.maven.surefire.testset.TestArtifactInfo)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.BaseProviderFactory: void setTestRequest(org.apache.maven.surefire.testset.TestRequest)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.booter.ForkedBooter: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.junit.JUnit3Provider: java.util.Iterator getSuites()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.junit.JUnit3Provider: org.apache.maven.surefire.suite.RunResult invoke(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: boolean isErrorFree()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: boolean isFailure()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: boolean isFailureOrTimeout()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: boolean isTimeout()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: int getCompletedCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: int getErrors()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: int getFailures()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: int getForkedProcessCode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: int getSkipped()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: java.lang.String getAsString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: org.apache.maven.surefire.suite.RunResult aggregate(org.apache.maven.surefire.suite.RunResult)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: org.apache.maven.surefire.suite.RunResult fromString(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.maven.surefire.suite.RunResult: org.apache.maven.surefire.suite.RunResult noTestsRun()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<com.animoto.api.ApiClientTest: void testConstructor()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testBasicPostrollDeserialization()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testBasicPostrollInstantiation()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testBasicPostrollSerialization()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testBasicPostrollTemplate()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testCustomFootagePostrollDeserialization()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testCustomFootagePostrollInstantiation()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSerialization()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testCustomFootagePostrollSourceUrl()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.PostrollTest: void testCustomFootagePostrollTemplate()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.SongTest: void testAttributes()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingAndRenderingJob getDirectingAndRenderingJob()>;com.animoto.api.dto.Payload.getBaseResource;63;isAccessible=false;
Method.invoke;<com.animoto.api.dto.Payload: com.animoto.api.resource.DirectingJob getDirectingJob()>;com.animoto.api.dto.Payload.getBaseResource;63;isAccessible=false;
Method.invoke;<com.animoto.api.dto.Payload: com.animoto.api.resource.RenderingJob getRenderingJob()>;com.animoto.api.dto.Payload.getBaseResource;63;isAccessible=false;
Method.invoke;<com.animoto.api.dto.Payload: com.animoto.api.resource.Storyboard getStoryboard()>;com.animoto.api.dto.Payload.getBaseResource;63;isAccessible=false;
Method.invoke;<com.animoto.api.dto.Payload: com.animoto.api.resource.Video getVideo()>;com.animoto.api.dto.Payload.getBaseResource;63;isAccessible=false;
Method.invoke;<com.animoto.api.dto.PayloadTest: void testGetBaseResource()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.enums.Format: com.animoto.api.enums.Format[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<com.animoto.api.enums.Format: java.lang.String getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;11;isAccessible=false;
Method.invoke;<com.animoto.api.enums.Framerate: com.animoto.api.enums.Framerate[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<com.animoto.api.enums.Framerate: float getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;11;isAccessible=false;
Method.invoke;<com.animoto.api.enums.Resolution: com.animoto.api.enums.Resolution[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<com.animoto.api.enums.Resolution: java.lang.String getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;11;isAccessible=false;
Method.invoke;<com.animoto.api.enums.Rotation: int getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;11;isAccessible=false;
Method.invoke;<com.animoto.api.enums.Style: java.lang.String getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;11;isAccessible=false;
Method.invoke;<com.animoto.api.enums.VisualType: java.lang.String getValue()>;com.animoto.api.gson.serializer.ValueSerializer.serialize;11;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingAndRenderingJobTest: void testFromJson()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingJobTest: void testGetLocation()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingJobTest: void testGetUrl()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingJobTest: void testIsComplete()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingJobTest: void testIsFailed()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingJobTest: void testIsPending()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.DirectingJobTest: void testToJson()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod;2170;isAccessible=false;
Method.invoke;<com.animoto.api.resource.RenderingJobTest: void testErrorParsing()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.RenderingJobTest: void testToJson()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.StoryboardTest: void testFromJson()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.resource.VideoTest: void testFromJson()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromDirectingAndRenderingJson()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<com.animoto.api.util.CallbackUtilTest: void testGenerateFromRenderingJson()>;junit.framework.TestCase.runTest;154;isAccessible=false;
Method.invoke;<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>;org.apache.maven.surefire.booter.JdkReflector.invokeAssertionStatusMethod;51;isAccessible=false;
Method.invoke;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.commons.logging.LogFactory.directGetContextClassLoader;901;isAccessible=false;
Method.invoke;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.commons.logging.impl.SimpleLog.getContextClassLoader;661;isAccessible=false;
Method.invoke;<java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<junit.framework.TestResult: void addListener(junit.framework.TestListener)>;org.apache.maven.surefire.junit.JUnitTestSet.execute;91;isAccessible=false;
Method.invoke;<junit.framework.TestSuite: void run(junit.framework.TestResult)>;org.apache.maven.surefire.junit.JUnitTestSet.execute;95;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.booter.BaseProviderFactory: void setClassLoaders(java.lang.ClassLoader,java.lang.ClassLoader)>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.booter.BaseProviderFactory: void setDirectoryScannerParameters(org.apache.maven.surefire.testset.DirectoryScannerParameters)>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.booter.BaseProviderFactory: void setProviderProperties(java.util.Properties)>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.booter.BaseProviderFactory: void setReporterConfiguration(org.apache.maven.surefire.report.ReporterConfiguration)>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.booter.BaseProviderFactory: void setRunOrderParameters(org.apache.maven.surefire.testset.RunOrderParameters)>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.booter.BaseProviderFactory: void setTestArtifactInfo(org.apache.maven.surefire.testset.TestArtifactInfo)>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.booter.BaseProviderFactory: void setTestRequest(org.apache.maven.surefire.testset.TestRequest)>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.junit.JUnit3Provider: org.apache.maven.surefire.suite.RunResult invoke(java.lang.Object)>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.suite.RunResult: int getCompletedCount()>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.suite.RunResult: int getErrors()>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.suite.RunResult: int getFailures()>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.invoke;<org.apache.maven.surefire.suite.RunResult: int getSkipped()>;org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray;189;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseHttpGetOnlyResource: java.lang.String getContentType()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: boolean isCompleted()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: boolean isFailed()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: boolean isPending()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: com.animoto.api.Metadata getMetadata()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.ApiResponse fromJson(java.lang.String)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: com.animoto.api.dto.Response getResponse()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: com.animoto.api.enums.HttpCallbackFormat getHttpCallbackFormat()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Storyboard getStoryboard()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: com.animoto.api.resource.Video getVideo()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: java.lang.String getHttpCallback()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: java.lang.String getLocation()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: java.lang.String getRequestId()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: java.lang.String getState()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: java.lang.String getUrl()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: java.util.Map getLinks()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void handleHttpResponse(org.apache.http.HttpResponse,int)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void prettyPrintToSystem()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setHttpCallback(java.lang.String)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setHttpCallbackFormat(com.animoto.api.enums.HttpCallbackFormat)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setLinks(java.util.Map)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setLocation(java.lang.String)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setMetadata(com.animoto.api.Metadata)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setRequestId(java.lang.String)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setState(java.lang.String)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setStoryboard(com.animoto.api.resource.Storyboard)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setUrl(java.lang.String)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.BaseResource: void setVideo(com.animoto.api.resource.Video)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.DirectingManifest getDirectingManifest()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.DirectingAndRenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getAccept()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String getContentType()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.DirectingAndRenderingJob: java.lang.String toJson()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.DirectingAndRenderingJob: void setDirectingManifest(com.animoto.api.DirectingManifest)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.DirectingAndRenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.RenderingJob: com.animoto.api.RenderingManifest getRenderingManifest()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.RenderingJob: java.lang.String getAccept()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.RenderingJob: java.lang.String getContentType()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.RenderingJob: java.lang.String toJson()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.RenderingJob: void setRenderingManifest(com.animoto.api.RenderingManifest)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.Storyboard: java.lang.String getAccept()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.Video: com.animoto.api.RenderingParameters getRenderingParameters()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.Video: java.lang.String getAccept()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.Video: java.lang.String getCoverImageUrl()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<com.animoto.api.resource.Video: java.lang.String getDownloadUrl()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: boolean equals(java.lang.Object)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: int hashCode()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: java.lang.Class getClass()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: java.lang.String toString()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: void notify()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: void notifyAll()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: void wait()>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: void wait(long)>;java.beans.MethodRef.set;46;isAccessible=false;
Method.toGenericString;<java.lang.Object: void wait(long,int)>;java.beans.MethodRef.set;46;isAccessible=false;
