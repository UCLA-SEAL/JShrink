I have processed the projects as listed in
"work_list_original.dat". I copied "work_list_original.dat" to 
"../work_list.dat". Then, to obtain the projects, "../download.sh" was 
executed. This downloaded all the projects into the "sample-projects" 
directory.

Then I checked to see which projects could be succesfully built. I did this by
running "../build.sh". This outputs a CSV with the schema
"<project>,<build_return_code>". Therefore, a "<build_return_code>" of
"0" means the project built successfully. It should be noted that some of
the projects crashed during building and this ripples up to crash the
script (I don't know why). Therefore, "build.sh" was executed
several times to fully populate the CSV. Within this directory, the
"build_output.csv" file contains the CSV generated by "../build.sh".

I then processed the built projects to see if all their tests passed. I
did this via "../tests_pass_script.sh" with a single argument --- the
output of the "../build.sh" (in our case, "build_output.csv"). This
script outputs a CSV with a schema of "<project>,<test_return_code>",
with a "<test_return_code>" of "0" meaning all tests have passed. We
recorded this output CSV to "test_output.csv".

I then ran the following script:

`cat tests_output.csv | awk -F, '($2==0){print $1}' | while read x; do 
	dir=$(echo $(basename ${x}) | cut -d_ -f1)
	dir2=$(echo $(basename ${x}) | cut -d_ -f2)
	echo "https://github.com/${dir}/${dir2}.git" \
	>>compiled_and_working_repos.dat
done`

I then generated "compiled_and_working_repos.dat" as a complete list
of projects that are both compilable and have no failing test cases.

I then deleted projects in "../work_list.dat" which we
found could not be compiled or contained failing test cases.

JShrink is not issue-free, and some projects are simply too large to 
process within an acceptable time period (a 3 hour timeout was set).
I therefore ran 
"../experiment_scripts/run_experiment_script_method_removal_with_tamiflex.sh"
and then ran "../script_output_categorizer.sh" on 
"../../results/method_removal_with_tamiflex_20190415/script_output.dat"
(the output of "run_experiment_script_method_removal_with_tamiflex.sh").
The "script_output_categorized.sh" categorizes the projects as either
"DONE", "TIMEOUT", and "ISSUE_#*" (i.e., a known issue was found, with 
the issue number as recorded on the project's GitHub page) for the most
common issues. The script will leave a projects categorization blank if 
this cannot be determined; which I later determined manually. The output
of this script (and my manual alterations) can be found in 
"project_status.csv".

With the info in "project_status.csv", I removed projects from
"work_list.dat" which timed-out or exited with a known issue (all
exits that were not timeouts are known). 


compiled_and_working_repos_github_stars.csv --- as of 2019-08-08.
